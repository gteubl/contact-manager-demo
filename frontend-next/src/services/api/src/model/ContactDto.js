/**
 * ContactManagerDemo.RestApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import City from './City';
import Gender from './Gender';

/**
 * The ContactDto model module.
 * @module model/ContactDto
 * @version 1.0
 */
class ContactDto {
    /**
     * Constructs a new <code>ContactDto</code>.
     * @alias module:model/ContactDto
     */
    constructor() { 
        
        ContactDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDto} obj Optional instance to populate.
     * @return {module:model/ContactDto} The populated <code>ContactDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = Gender.constructFromObject(data['gender']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('birthDate')) {
                obj['birthDate'] = ApiClient.convertToType(data['birthDate'], 'Date');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = City.constructFromObject(data['city']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ContactDto.prototype['id'] = undefined;

/**
 * @member {String} firstName
 */
ContactDto.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
ContactDto.prototype['lastName'] = undefined;

/**
 * @member {module:model/Gender} gender
 */
ContactDto.prototype['gender'] = undefined;

/**
 * @member {String} email
 */
ContactDto.prototype['email'] = undefined;

/**
 * @member {Date} birthDate
 */
ContactDto.prototype['birthDate'] = undefined;

/**
 * @member {String} phoneNumber
 */
ContactDto.prototype['phoneNumber'] = undefined;

/**
 * @member {module:model/City} city
 */
ContactDto.prototype['city'] = undefined;






export default ContactDto;

